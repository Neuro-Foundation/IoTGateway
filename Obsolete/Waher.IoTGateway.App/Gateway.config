<?xml version="1.0" encoding="utf-8" ?>
<GatewayConfiguration xmlns="http://waher.se/Schema/GatewayConfiguration.xsd">
	<!-- 
	The configuration file in the program data folder, will have precedence over the configuration file in the installation folder. 
    When upgrading, the configuration file in the installation folder will be updated, but the configuration file in the program data
    folder will be maintained. If you make changes to the configuration file, make a copy and place it in the program data folder, and
    edit it there. This will make sure you don't lose any changes when you update the software. 
	-->

	<ApplicationName>IoT Gateway</ApplicationName>

	<DefaultPage>/Index.md</DefaultPage>
	<!-- 
	Multiple DefaultPage elements may be provided, one for each host name hosted by the gateway. Use the optional host attribute to
    define host name.
       
    Example:
       
    <DefaultPage host="example.org">/Index.html</DefaultPage>
    -->

	<!-- Encryption support not available in UWP. -->
	<Database folder="Data" defaultCollectionName="Default" blockSize="8192" blocksInCache="10000" blobBlockSize="8192" timeoutMs="3600000" encrypted="false"/>

	<Ports>
		<Port protocol="HTTP">80</Port>
		<Port protocol="HTTP">8080</Port>
		<Port protocol="HTTP">8081</Port>
		<Port protocol="HTTP">8082</Port>
		<Port protocol="HTTPS">443</Port>
		<Port protocol="HTTPS">8088</Port>
		<Port protocol="XMPP.C2S">5222</Port>
		<Port protocol="XMPP.S2S">5269</Port>
		<Port protocol="SOCKS5">1080</Port>
		<Port protocol="SMTP">25</Port>
		<Port protocol="SMTP">587</Port>
	</Ports>

	<FileFolders>
		<!--
		Add a sequence of FileFolder elements. Each FileFolder element creates a web folder defined by the webFolder attribute. These folder 
		resources are absolute resources. Each web folder will be mapped to a corresponding folder on the local machine or in the network, 
		defined by the folderPath attribute. 
    
		Example:
    
		<FileFolder webFolder="/Folder" folderPath="\\Server\Path"/>
		-->
	</FileFolders>

	<VanityResources>
		<!--
		Add a sequence of VanityResource elements. Each VanityResource element contains a regular expression in the regex attribute and a
		transformed (real) local resource name. The regular expression will be used to match local resource names in incoming requests. 
		These regular expressions can contain named groups. The url attribute contains the transformed resource name that will be used to 
		locate the resource requested. Named groups can be placed between curly braces { and }.
    
		Example:
    
		<VanityResource regex="/resource/(?'Op'edit|view)/(?'Id'\d+)" url="/Resource.md?Op={Op}&Id={Id}"/>
		-->
	</VanityResources>

	<!--
	Include the following element, if you want ALL internal exceptions raised during the execution of the program output to log files. 
	This might come in handy if you need to troubleshoot unexpected errors in production. Each time the gateway restarts, statistics
	from previous log files are generated in the same folder.
  
	<ExportExceptions folder="Exceptions"/>
	-->
</GatewayConfiguration>